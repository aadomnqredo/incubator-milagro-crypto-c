/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/

/* smoke test for BLS */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "config_curve_ZZZ.h"
#include "randapi.h"

#if CURVE_SECURITY_ZZZ == 128
#include "bls_ZZZ.h"
#elif CURVE_SECURITY_ZZZ == 192
#include "bls192_ZZZ.h"
#elif CURVE_SECURITY_ZZZ == 256
#include "bls256_ZZZ.h"
#endif

// Support multiple security levels
#if CURVE_SECURITY_ZZZ == 128
#define G2LEN 4*BFS_ZZZ
#elif CURVE_SECURITY_ZZZ == 192
#define G2LEN 8*BFS_ZZZ
#elif CURVE_SECURITY_ZZZ == 256
#define G2LEN 16*BFS_ZZZ
#endif

static char message[]="This is a test message";

int bls(csprng *RNG)
{
    int rc;
    char s[BGS_ZZZ];
    char w[G2LEN];
    char sig[BFS_ZZZ+1];
    octet S= {0,sizeof(s),s};
    octet W= {0,sizeof(w),w};
    octet SIG= {0,sizeof(sig),sig};

    BLS_ZZZ_KEY_PAIR_GENERATE(RNG,&S,&W);

    printf("Private key: 0x");
    OCT_output(&S);
    printf("Public key: 0x");
    OCT_output(&W);

    BLS_ZZZ_SIGN(&SIG,message,&S);
    printf("Signature: 0x");
    OCT_output(&SIG);

    rc=BLS_ZZZ_VERIFY(&SIG,message,&W);
    if (rc==BLS_OK)
    {
        printf("Test Passed valid Signature / message\n");
    }
    else
    {
        printf("Test Failed valid Signature / message\n");
        return 1;
    }

    // change the message
    message[0]='Z';
    printf("message %s\n", message);
    rc=BLS_ZZZ_VERIFY(&SIG,message,&W);
    if (rc!=BLS_OK)
    {
        printf("Test Passed valid Signature / invalid message\n");
    }
    else
    {
        printf("Test Failed valid Signature / invalid message\n");
        return 1;
    }

    // Invalid signature
    message[0]='T';
    SIG.val[0]=5;
    printf("message %s\n", message);
    printf("Signature: 0x");
    OCT_output(&SIG);
    rc=BLS_ZZZ_VERIFY(&SIG,message,&W);
    if (rc!=BLS_OK)
    {
        printf("Test Passed invalid Signature / valid message\n");
    }
    else
    {
        printf("Test Failed invalid Signature / valid message\n");
        return 1;
    }

    return 0;
}


int main()
{
#ifdef DEBUG
    printf("%d bit build\n",CHUNK);
#endif

    // non random seed value
    char seed[32] = {0};
    octet SEED = {sizeof(seed),sizeof(seed),seed};
    for (int i=0; i<32; i++) SEED.val[i]=i+1;
    printf("SEED: ");
    OCT_output(&SEED);
    printf("\n");

    // initialise random number generator
    csprng RNG;
    CREATE_CSPRNG(&RNG,&SEED);

    printf("\nTesting BLS signature for curve ZZZ\n");
    int rc = bls(&RNG);
    if (rc == 0)
    {
        printf("SUCCESS");
    }
    else
    {
        printf("FAILURE");
    }

    KILL_CSPRNG(&RNG);
}


